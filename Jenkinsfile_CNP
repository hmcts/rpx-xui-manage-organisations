#!groovy

properties([
    [
        $class       : 'GithubProjectProperty',
        displayName  : 'Expert UI Manage Organisations',
        projectUrlStr: 'https://github.com/hmcts/rpx-xui-manage-organisations'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

//To enable PACT testing on pipeline uncomment the next line
import uk.gov.hmcts.contino.AppPipelineDsl

def type      = "nodejs"
def product   = "xui"
def component = "mo-webapp"
def channel   = '#xui-pipeline'
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
  'rpx-${env}': [
    secret('test-user1-email', 'TEST_USER1_EMAIL'),
    secret('test-user1-password', 'TEST_USER1_PASSWORD'),
    secret('test-user2-email', 'TEST_USER2_EMAIL'),
    secret('test-user2-password', 'TEST_USER2_PASSWORD'),
    secret('test-townley-email', 'TEST_TOWNLEY_EMAIL'),
    secret('test-townley-password', 'TEST_TOWNLEY_PASSWORD'),
    secret('test-api-email', 'TEST_API_EMAIL'),
    secret('test-api-password', 'TEST_API_PASSWORD'),
    secret('mo-s2s-client-secret', 'S2S_SECRET'),
    secret('xui-oauth2-token', 'IDAM_SECRET'),
    secret('appinsights-instrumentationkey-mo', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
    secret('google-analytics-key', 'GOOGLE_ANALYTICS_KEY'),
    secret('launch-darkly-client-id', 'LAUNCH_DARKLY_CLIENT_ID'),
    secret('system-user-name', 'SYSTEM_USER_NAME'),
    secret('system-user-password', 'SYSTEM_USER_PASSWORD'),
    secret('mo-webapp-redis6-connection-string', 'REDISCLOUD_URL'),

  ],
  's2s-${env}' : [
    secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
    secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
    secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY'),
    secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY')
  ],
  'ccd-${env}' : [
    secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('AppInsightsInstrumentationKey', 'APP_INSIGHTS_INSTRUMENTATION_KEY')
  ],
  'am-${env}'  : [
    secret('am-role-assignment-service-s2s-secret', 'AM_ROLE_ASSIGNMENT_SERVICE_SECRET')
  ]
]

def branchesToSync = ['demo', 'perftest', 'ithc']

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
    disableCleanupOfHelmReleaseOnFailure()
    enableSlackNotifications(channel)
    loadVaultSecrets(secrets)
    enableFortifyScan('rpx-aat')
    enableAksStagingDeployment()
    syncBranchesWithMaster(branchesToSync)

   enablePactAs([
     AppPipelineDsl.PactRoles.CONSUMER
])

    afterSuccess('build') {
        yarnBuilder.yarn('build')
    }

    afterSuccess('test') {

        publishHTML ( [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/coverage/node",
            reportFiles          : "index.html",
            reportName           : "node coverage tests"
        ])

        publishHTML ( [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/coverage/ng",
            reportFiles          : "index.html",
            reportName           : "ng coverage tests"
        ])

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/a11y/",
            reportFiles          : 'Report.html',
            reportName           : 'Manage Org a11y Test'
        ])




    }

//    after('smoketest:demo') {
//        publishHTML([
//            allowMissing         : true,
//            alwaysLinkToLastBuild: true,
//            keepAll              : true,
//            reportDir            : "reports/tests/smoke/",
//            reportFiles          : 'index.html',
//            reportName           : 'DEMO Smoke Test'
//        ])
//    }

    afterSuccess('smoketest:preview') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/api_functional/",
            reportFiles          : 'mochawesome.html',
            reportName           : 'PREVIEW API Test'
        ])

           publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/smoke_tests/functional",
            reportFiles          : 'index.html',
            reportName           : 'PREVIEW Manage Org Smoke Test'
        ])
    }

    afterSuccess('functionalTest:preview') {

      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "reports/tests/api_functional/",
        reportFiles          : 'mochawesome.html',
        reportName           : 'PREVIEW API Functional Test'
      ])

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/functional/",
            reportFiles          : 'index.html',
            reportName           : 'PREVIEW Functional Test'
        ])
    }


    afterSuccess('smoketest:aat') {
        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/api_functional/",
            reportFiles          : 'mochawesome.html',
            reportName           : 'API Smoke Test'
        ])

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/smoke_tests/functional",
            reportFiles          : 'index.html',
            reportName           : 'AAT Manage Org Smoke Test'
        ])
    }

    afterSuccess('functionalTest:aat') {

      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "reports/tests/api_functional/",
        reportFiles          : 'mochawesome.html',
        reportName           : 'API Functional Test'
      ])

        publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "reports/tests/functional/",
            reportFiles          : 'index.html',
            reportName           : 'AAT Functional Test'
        ])
    }

}
