{"version":3,"file":"/home/alan/Cloud/workspaces/prd-pui-manager/api/lib/interceptors.ts","sources":["/home/alan/Cloud/workspaces/prd-pui-manager/api/lib/interceptors.ts"],"names":[],"mappings":"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","sourcesContent":["import * as exceptionFormatter from 'exception-formatter'\nimport * as stringify from 'json-stringify-safe'\nimport config from './config'\nimport * as errorStack from '../lib/errorStack'\nimport { shorten, valueOrNull } from '../lib/util'\nimport { client } from './appInsights'\nimport * as log4jui from './log4jui'\n\nconst exceptionOptions = {\n    maxLines: 1,\n}\n\nexport function requestInterceptor(request) {\n    const logger = log4jui.getLogger('outgoing')\n\n    const url = shorten(request.url, config.maxLogLine)\n    logger.info(`${request.method.toUpperCase()} to ${url}`)\n    //add timings to requests\n    request.metadata = { startTime: new Date() }\n\n    logger.info('Auth')\n    logger.info(JSON.stringify(request.headers.common.Authorization))\n    logger.info('---------------------')\n    logger.info('header FULL')\n    logger.info(JSON.stringify(request.headers.common.ServiceAuthorization))\n    return request\n}\n\nexport function successInterceptor(response) {\n    response.config.metadata.endTime = new Date()\n    response.duration = response.config.metadata.endTime - response.config.metadata.startTime\n\n    const logger = log4jui.getLogger('return')\n\n    const url = shorten(response.config.url, config.maxLogLine)\n\n    logger.trackRequest({\n        duration: response.duration,\n        name: `Service ${response.config.method.toUpperCase()} call`,\n        resultCode: response.status,\n        success: true,\n        url: response.config.url,\n    })\n\n    logger.info(`Success on ${response.config.method.toUpperCase()} to ${url} (${response.duration})`)\n    return response\n}\n\nexport function errorInterceptor(error) {\n    error.config.metadata.endTime = new Date()\n    error.duration = error.config.metadata.endTime - error.config.metadata.startTime\n\n    const logger = log4jui.getLogger('return')\n\n    const url = shorten(error.config.url, config.maxLogLine)\n\n    // application insights logging\n    logger.trackRequest({\n        duration: error.duration,\n        name: `Service ${error.config.method.toUpperCase()} call`,\n        resultCode: error.status,\n        success: true,\n        url: error.config.url,\n    })\n\n    const status = valueOrNull(error, 'response.status') ? error.response.status : Error(error).message\n    let data = valueOrNull(error, 'response.data.details')\n    if (!data) {\n        data = valueOrNull(error, 'response.status') ? JSON.stringify(error.response.data, null, 2) : null\n        logger.error(`Error on ${error.config.method.toUpperCase()} to ${url} in (${error.duration}) - ${error} \\n\n        ${exceptionFormatter(data, exceptionOptions)}`)\n    } else {\n        logger.error(`Error on ${error.config.method.toUpperCase()} to ${url} in (${error.duration}) - ${error} \\n\n        ${JSON.stringify(data)}`)\n    }\n\n    errorStack.push(['request', JSON.parse(stringify(error.request))])\n    errorStack.push(['response', JSON.parse(stringify(error.response))])\n\n    return Promise.reject(error.response)\n}\n"]}