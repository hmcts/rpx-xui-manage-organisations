{"version":3,"file":"/home/alan/Cloud/workspaces/prd-pui-manager/api/lib/appInsights.ts","sources":["/home/alan/Cloud/workspaces/prd-pui-manager/api/lib/appInsights.ts"],"names":[],"mappings":";;AAAA,yDAA0D;AAE1D,mCAA6B;AAI7B,2DAA2D;AAC3D,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAA;AAElD,IAAI,WAAW,KAAK,OAAO,EAAE;IACzB,mBAAmB;SACd,KAAK,CAAC,gBAAM,CAAC,6BAA6B,CAAC;SAC3C,4BAA4B,CAAC,IAAI,CAAC;SAClC,sBAAsB,CAAC,IAAI,CAAC;SAC5B,yBAAyB,CAAC,IAAI,CAAC;SAC/B,wBAAwB,CAAC,IAAI,CAAC;SAC9B,0BAA0B,CAAC,IAAI,CAAC;SAChC,qBAAqB,CAAC,IAAI,CAAC;SAC3B,sBAAsB,CAAC,IAAI,CAAC;SAC5B,KAAK,EAAE,CAAA;IAEZ,cAAM,GAAG,mBAAmB,CAAC,aAAa,CAAA;IAC1C,cAAM,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAA;CAE1D;KAAM;IACH,cAAM,GAAG,IAAI,CAAA;CAChB;AAED,qBAA4B,GAAoB,EAAE,GAAqB,EAAE,IAAI;IACzE,IAAI,cAAM,EAAE;QACR,cAAM,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAA;KAC/D;IAED,IAAI,EAAE,CAAA;AACV,CAAC;AAND,kCAMC","sourcesContent":["import * as applicationinsights from 'applicationinsights'\nimport * as express from 'express'\nimport config from './config'\n\nexport let client\n\n// shouldnt do this check here but this is a high level dep\nconst environment = process.env.JUI_ENV || 'local'\n\nif (environment !== 'local') {\n    applicationinsights\n        .setup(config.appInsightsInstrumentationKey)\n        .setAutoDependencyCorrelation(true)\n        .setAutoCollectRequests(true)\n        .setAutoCollectPerformance(true)\n        .setAutoCollectExceptions(true)\n        .setAutoCollectDependencies(true)\n        .setAutoCollectConsole(true)\n        .setUseDiskRetryCaching(true)\n        .start()\n\n    client = applicationinsights.defaultClient\n    client.trackTrace({ message: 'App Insight Activated' })\n\n} else {\n    client = null\n}\n\nexport function appInsights(req: express.Request, res: express.Response, next) {\n    if (client) {\n        client.trackNodeHttpRequest({ request: req, response: res })\n    }\n\n    next()\n}\n"]}