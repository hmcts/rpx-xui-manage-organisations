{"version":3,"file":"/home/alan/Cloud/workspaces/prd-pui-manager/api/accounts/index.spec.ts","sources":["/home/alan/Cloud/workspaces/prd-pui-manager/api/accounts/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as chai from 'chai'\nimport { expect } from 'chai'\nimport 'mocha'\nimport * as sinon from 'sinon'\nimport * as sinonChai from 'sinon-chai'\nimport { mockReq, mockRes } from 'sinon-express-mock'\n\nchai.use(sinonChai)\n// below this line you  ut imports to do with our code. Above this line are all testing i ports\n\nimport * as accountIndex from './index'\nimport * as rdProfessionals from '../services/rdProfessionals'\nimport { getAccountsForOrganisation } from '../services/rdProfessionals'\nimport {PaymentAccountDto} from '../lib/models/transactions';\nimport * as util from '../lib/util';\nimport {accountsForOrganisation} from './index';\nimport {validatePBANumberForOrganisation} from './index';\n\nimport * as payments from '../services/payment'\nimport {PaymentMock} from './data.mock';\nimport {getPayments} from '../services/payment';\n\ndescribe('account index', () => {\n  let req\n  let res\n  let sandbox\n  const MockDataForOrganisations: PaymentAccountDto[] = [\n    {\n      pbaNumber:\t'XDDDDDoDDDD',\n      organisationId:\t'B123123',\n      userId:\t'A123123'\n    }\n  ]\n  const request = {\n    params: {\n      id: 'XDDDDDDDDD'\n    },\n    session: {\n      auth: {\n        orgId: 'B123123',\n      },\n    },\n  }\n\n  beforeEach(() => {\n    sandbox = sinon.createSandbox()\n    req = mockReq(request)\n    res = mockRes()\n  })\n  afterEach(() => {\n    sandbox.restore()\n  })\n\n  it('accountsForOrganisation', async () => {\n    sandbox.stub(util, 'asyncReturnOrError').resolves(MockDataForOrganisations)\n    sandbox.stub(rdProfessionals, 'getAccountsForOrganisation').resolves(MockDataForOrganisations)\n    const retValue = await accountIndex.accountsForOrganisation(req, res)\n    expect(retValue).to.equal(MockDataForOrganisations)\n  })\n  it('handleAccountPbasRoute should return errors', async () => {\n    sandbox.stub(accountIndex, 'accountsForOrganisation').resolves(null)\n    await accountIndex.handleAccountPbasRoute(req, res)\n    expect(res.send).not.to.have.been.called\n    sandbox.restore()\n  })\n  it('handleAccountPbasRoute should return PBS accounts', async () => {\n    sandbox.stub(accountIndex, 'accountsForOrganisation').resolves(MockDataForOrganisations)\n    await accountIndex.handleAccountPbasRoute(req, res)\n    expect(res.send).to.have.been.calledWith(MockDataForOrganisations)\n  })\n  it('validatePBANumberForOrganisation should return status 401', async () => {\n    const response = 'Unauthorised PBA number for organisation'\n    sandbox.stub(accountIndex, 'accountsForOrganisation').resolves(MockDataForOrganisations)\n    const isValid = await accountIndex.validatePBANumberForOrganisation(req, res)\n    expect(res.send).to.have.been.calledWith(response)\n    expect(res.status).to.have.been.calledWith(401)\n    expect(isValid).to.be.true\n  })\n  it('validatePBANumberForOrganisation account should fail and return false', async () => {\n    const sandbox = sinon.createSandbox()\n    const requestFail = {\n      params: {\n        id: 'A123'\n      },\n      session: {\n        auth: {\n          orgId: 'B123123',\n        },\n      },\n    }\n    const reqfailuer = mockReq(requestFail)\n    sandbox.stub(accountIndex, 'accountsForOrganisation').resolves(MockDataForOrganisations)\n    const isValid = await accountIndex.validatePBANumberForOrganisation(reqfailuer, res)\n    expect(isValid).to.be.true\n    sandbox.restore()\n  })\n  it('validatePBANumberForOrganisation: account should return null so it return false', async () => {\n    sandbox.stub(accountIndex, 'accountsForOrganisation').resolves([])\n    const isValid = await accountIndex.validatePBANumberForOrganisation(req, res)\n  })\n  it('handleAccountRoute', async () => {\n\n    sandbox.stub(accountIndex, 'validatePBANumberForOrganisation').resolves(true)\n    const accountsMock = [\n        {\n        pbaNumber:\t'sadasdas',\n        userId:\t'1',\n        organisationId:\t'asdasd'\n       },\n       {\n        pbaNumber:\t'sadasdas',\n        userId:\t'2',\n        organisationId:\t'asdasd'\n       }\n     ]\n    sandbox.stub(util, 'asyncReturnOrError').resolves({data: accountsMock})\n    sandbox.stub(payments, 'getAccount').resolves({data: accountsMock})\n    await accountIndex.handleAccountRoute(req, res)\n    expect(res.send).to.have.been.calledWith(accountsMock)\n  })\n  it('handleAccountPbaTransactionsRoute', async () => {\n    sandbox.stub(accountIndex, 'validatePBANumberForOrganisation').resolves(true)\n    sandbox.stub(util, 'asyncReturnOrError').resolves({\n        data: PaymentMock\n    })\n    sandbox.stub(payments, 'getPayments').resolves({data: PaymentMock})\n    await accountIndex.handleAccountPbaTransactionsRoute(req, res)\n    expect(res.send).to.have.been.calledWith(PaymentMock)\n  })\n})\n"]}