{"version":3,"file":"/home/alan/Cloud/workspaces/prd-pui-manager/api/accounts/index.ts","sources":["/home/alan/Cloud/workspaces/prd-pui-manager/api/accounts/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAAkC;AAClC,+BAAgC;AAChC,wCAAkC;AAGlC,oCAA8C;AAC9C,+CAA2D;AAC3D,+DAAsE;AAEtE,IAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;AACvC,MAAM,CAAC,KAAK,GAAG,gBAAM,CAAC,OAAO,CAAA;AAChB,QAAA,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAA;AAEzD,iCAA8C,GAAoB,EAAE,GAAqB;mCAAG,OAAO;;;wBAC1F,qBAAM,yBAAkB,CAC7B,4CAA0B,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAClD,mFAAmF,EACnF,GAAG,EACH,MAAM,CACP,EAAA;wBALD,sBAAO,SAKN,EAAA;;;;CACF;AAPD,0DAOC;AAED,gCAA6C,GAAoB,EAAE,GAAqB;;;;;wBAEhD,qBAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAA5E,QAAQ,GAAwB,SAA4C;oBAElF,IAAI,QAAQ,EAAE;wBACZ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;qBACnB;;;;;CAEF;AARD,wDAQC;AAED,0CAAuD,GAAoB,EAAE,GAAqB;mCAAG,OAAO;;;;wBACpE,qBAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAA5E,QAAQ,GAAwB,SAA4C;oBAElF,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,SAAS,KAAK,GAAG,CAAC,MAAM,CAAC,EAAE,EAAnC,CAAmC,CAAC,EAAE;wBAC9E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAA;wBAChE,sBAAO,KAAK,EAAA;qBACb;oBAED,sBAAO,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,EAAA;;;;CAClC;AATD,4EASC;AAED,4BAAyC,GAAoB,EAAE,GAAqB;;;;;wBAC/D,qBAAM,IAAI,CAAC,gCAAgC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAAlE,UAAU,GAAG,SAAqD;yBAEpE,UAAU,EAAV,wBAAU;oBAEK,qBAAM,yBAAkB,CACvC,oBAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EACzB,iEAAiE,EACjE,GAAG,EACH,MAAM,CACP,EAAA;;oBALK,QAAQ,GAAG,SAKhB;oBAED,IAAI,QAAQ,EAAE;wBACZ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;qBACxB;;;;;;CAEJ;AAhBD,gDAgBC;AAED,2CAAwD,GAAoB,EAAE,GAAqB;;;;;wBAC9E,qBAAM,IAAI,CAAC,gCAAgC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAA;;oBAAlE,UAAU,GAAG,SAAqD;yBAEpE,UAAU,EAAV,wBAAU;oBAEK,qBAAM,yBAAkB,CACvC,qBAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAC1B,0EAA0E,EAC1E,GAAG,EACH,MAAM,CACP,EAAA;;oBALK,QAAQ,GAAG,SAKhB;oBAED,IAAI,QAAQ,EAAE;wBACZ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;qBACxB;;;;;;CAEJ;AAhBD,8EAgBC;AACD,WAAW;AACX,cAAM,CAAC,GAAG,CAAC,OAAO,EAAE,sBAAsB,CAAC,CAAA;AAC3C,iBAAiB;AACjB,cAAM,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAA;AACtC,cAAM,CAAC,GAAG,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAA;AAElE,kBAAe,cAAM,CAAA","sourcesContent":["import * as express from 'express'\nimport * as log4js from 'log4js'\nimport config from '../lib/config'\nimport {EnhancedRequest} from '../lib/models'\nimport {PaymentAccountDto} from '../lib/models/transactions'\nimport {asyncReturnOrError} from '../lib/util'\nimport {getAccount, getPayments} from '../services/payment'\nimport {getAccountsForOrganisation} from '../services/rdProfessionals'\nimport { mockReq, mockRes } from 'sinon-express-mock'\nconst logger = log4js.getLogger('auth')\nlogger.level = config.logging\nexport const router = express.Router({mergeParams: true})\n\nexport async function accountsForOrganisation(req: EnhancedRequest, res: express.Response): Promise<PaymentAccountDto[]> {\n  return await asyncReturnOrError(\n    getAccountsForOrganisation(req.session.auth.orgId),\n    '3rd party service payment api return error - Cannot get accounts for organisation',\n    res,\n    logger\n  )\n}\n\nexport async function handleAccountPbasRoute(req: EnhancedRequest, res: express.Response) {\n\n  const accounts: PaymentAccountDto[] = await this.accountsForOrganisation(req, res)\n\n  if (accounts) {\n    res.send(accounts)\n  }\n\n}\n\nexport async function validatePBANumberForOrganisation(req: EnhancedRequest, res: express.Response): Promise<boolean> {\n  const accounts: PaymentAccountDto[] = await this.accountsForOrganisation(req, res)\n\n  if (accounts && !accounts.some(account => account.pbaNumber === req.params.id)) {\n    res.status(401).send('Unauthorised PBA number for organisation')\n    return false\n  }\n\n  return !!accounts.length || false\n}\n\nexport async function handleAccountRoute(req: EnhancedRequest, res: express.Response) {\n  const isValidPBA = await this.validatePBANumberForOrganisation(req, res)\n\n  if (isValidPBA) {\n\n    const response = await asyncReturnOrError(\n      getAccount(req.params.id),\n      '3rd party service payment api return error - cannot get account',\n      res,\n      logger\n    )\n\n    if (response) {\n      res.send(response.data)\n    }\n  }\n}\n\nexport async function handleAccountPbaTransactionsRoute(req: EnhancedRequest, res: express.Response) {\n  const isValidPBA = await this.validatePBANumberForOrganisation(req, res)\n\n  if (isValidPBA) {\n\n    const response = await asyncReturnOrError(\n      getPayments(req.params.id),\n      '3rd party service payment api return error - cannot get account payments',\n      res,\n      logger\n    )\n\n    if (response) {\n      res.send(response.data)\n    }\n  }\n}\n// overview\nrouter.get('/pbas', handleAccountPbasRoute)\n// Single account\nrouter.get('/:id', handleAccountRoute)\nrouter.get('/:id/transactions', handleAccountPbaTransactionsRoute)\n\nexport default router\n"]}